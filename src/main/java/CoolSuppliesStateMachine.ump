//%% NEW FILE Order BEGINS HERE %%
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.35.0.7523.c616a4dce modeling language!*/
// line 2 "model.ump"
// line 31 "model.ump"
public class Order
{
//------------------------
// MEMBER VARIABLES
//------------------------

//Order State Machines
public enum Status { Started, Penalized, Paid, Prepared, PickedUp }
private Status status;

//------------------------
// CONSTRUCTOR
//------------------------
 
public Order()
{
setStatus(Status.Started);
}
 
//------------------------
// INTERFACE
//------------------------
 
public String getStatusFullName()
{
String answer = status.toString();
return answer;
}
 
public Status getStatus()
{
return status;
}
 
public boolean startSchoolYear()
{
boolean wasEventProcessed = false;
 
Status aStatus = status;
switch (aStatus)  
{
case Started:
// line 5 "model.ump"
Iteration3Controller.startSchoolYear()
setStatus(Status.Penalized);
wasEventProcessed = true;
break;
case Paid:
// line 14 "model.ump"
Iteration3Controller.startSchoolYear()
setStatus(Status.Prepared);
wasEventProcessed = true;
break;
default:
// Other states do respond to this event
}
return wasEventProcessed;
}

public boolean payForOrder()

{

boolean wasEventProcessed = false;

Status aStatus = status;

switch (aStatus)

{

case Started:

if (this.getOrderItems()>0)

{

// line 6 "model.ump"

payForOrder()

setStatus(Status.Paid);
wasEventProcessed = true;

break;

}

break;

default:

// Other states do respond to this event

}

 

return wasEventProcessed;

}

 

public boolean payForEverything()

{

boolean wasEventProcessed = false;

Status aStatus = status;

switch (aStatus)

{

case Penalized:

// line 9 "model.ump"

payForPenaltyAndOrder()

setStatus(Status.Prepared);

wasEventProcessed = true;

break;

default:

// Other states do respond to this event

}

 

return wasEventProcessed;

}

public boolean recieveOrder()

{

boolean wasEventProcessed = false;

Status aStatus = status;

switch (aStatus)

{

case Prepared:

// line 17 "model.ump"

Iteration3Controller.pickUpOrder()

setStatus(Status.PickedUp);

wasEventProcessed = true;

break;

default:

// Other states do respond to this event

}

return wasEventProcessed;

}

private void setStatus(Status aStatus)

{

status = aStatus;

}

 

public void delete()

{}

// line 22 "model.ump"
public void payForPenaltyAndOrder(){
this.PayForPenalty();

this.payForOrder();
}
 
}